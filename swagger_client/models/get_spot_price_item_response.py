# coding: utf-8

"""
    Ostrom API

    The Ostrom API is designed to allow our customer and partners to develop apps that integrates with our smart energy management platform. The API has a RESTful architecture and utilizes OAuth2 authorization.   # noqa: E501

    OpenAPI spec version: 2023-11-01T00:00:00.000Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSpotPriceItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'object',
        'net_mwh_price': 'object',
        'net_kwh_price': 'object',
        'gross_kwh_price': 'object',
        'net_kwh_tax_and_levies': 'object',
        'gross_kwh_tax_and_levies': 'object',
        'net_monthly_ostrom_base_fee': 'object',
        'gross_monthly_ostrom_base_fee': 'object',
        'net_monthly_grid_fees': 'object',
        'gross_monthly_grid_fees': 'object'
    }

    attribute_map = {
        '_date': 'date',
        'net_mwh_price': 'netMwhPrice',
        'net_kwh_price': 'netKwhPrice',
        'gross_kwh_price': 'grossKwhPrice',
        'net_kwh_tax_and_levies': 'netKwhTaxAndLevies',
        'gross_kwh_tax_and_levies': 'grossKwhTaxAndLevies',
        'net_monthly_ostrom_base_fee': 'netMonthlyOstromBaseFee',
        'gross_monthly_ostrom_base_fee': 'grossMonthlyOstromBaseFee',
        'net_monthly_grid_fees': 'netMonthlyGridFees',
        'gross_monthly_grid_fees': 'grossMonthlyGridFees'
    }

    def __init__(self, _date=None, net_mwh_price=None, net_kwh_price=None, gross_kwh_price=None, net_kwh_tax_and_levies=None, gross_kwh_tax_and_levies=None, net_monthly_ostrom_base_fee=None, gross_monthly_ostrom_base_fee=None, net_monthly_grid_fees=None, gross_monthly_grid_fees=None):  # noqa: E501
        """GetSpotPriceItemResponse - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._net_mwh_price = None
        self._net_kwh_price = None
        self._gross_kwh_price = None
        self._net_kwh_tax_and_levies = None
        self._gross_kwh_tax_and_levies = None
        self._net_monthly_ostrom_base_fee = None
        self._gross_monthly_ostrom_base_fee = None
        self._net_monthly_grid_fees = None
        self._gross_monthly_grid_fees = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if net_mwh_price is not None:
            self.net_mwh_price = net_mwh_price
        if net_kwh_price is not None:
            self.net_kwh_price = net_kwh_price
        if gross_kwh_price is not None:
            self.gross_kwh_price = gross_kwh_price
        if net_kwh_tax_and_levies is not None:
            self.net_kwh_tax_and_levies = net_kwh_tax_and_levies
        if gross_kwh_tax_and_levies is not None:
            self.gross_kwh_tax_and_levies = gross_kwh_tax_and_levies
        if net_monthly_ostrom_base_fee is not None:
            self.net_monthly_ostrom_base_fee = net_monthly_ostrom_base_fee
        if gross_monthly_ostrom_base_fee is not None:
            self.gross_monthly_ostrom_base_fee = gross_monthly_ostrom_base_fee
        if net_monthly_grid_fees is not None:
            self.net_monthly_grid_fees = net_monthly_grid_fees
        if gross_monthly_grid_fees is not None:
            self.gross_monthly_grid_fees = gross_monthly_grid_fees

    @property
    def _date(self):
        """Gets the _date of this GetSpotPriceItemResponse.  # noqa: E501

        The date of the day-ahead spot price data (start from)  # noqa: E501

        :return: The _date of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetSpotPriceItemResponse.

        The date of the day-ahead spot price data (start from)  # noqa: E501

        :param _date: The _date of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self.__date = _date

    @property
    def net_mwh_price(self):
        """Gets the net_mwh_price of this GetSpotPriceItemResponse.  # noqa: E501

        The MWh day-ahead spot price without VAT in EUR  # noqa: E501

        :return: The net_mwh_price of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._net_mwh_price

    @net_mwh_price.setter
    def net_mwh_price(self, net_mwh_price):
        """Sets the net_mwh_price of this GetSpotPriceItemResponse.

        The MWh day-ahead spot price without VAT in EUR  # noqa: E501

        :param net_mwh_price: The net_mwh_price of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._net_mwh_price = net_mwh_price

    @property
    def net_kwh_price(self):
        """Gets the net_kwh_price of this GetSpotPriceItemResponse.  # noqa: E501

        The kWh day-ahead spot price without VAT in cents  # noqa: E501

        :return: The net_kwh_price of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._net_kwh_price

    @net_kwh_price.setter
    def net_kwh_price(self, net_kwh_price):
        """Sets the net_kwh_price of this GetSpotPriceItemResponse.

        The kWh day-ahead spot price without VAT in cents  # noqa: E501

        :param net_kwh_price: The net_kwh_price of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._net_kwh_price = net_kwh_price

    @property
    def gross_kwh_price(self):
        """Gets the gross_kwh_price of this GetSpotPriceItemResponse.  # noqa: E501

        The kWh day-ahead spot price with VAT in cents  # noqa: E501

        :return: The gross_kwh_price of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._gross_kwh_price

    @gross_kwh_price.setter
    def gross_kwh_price(self, gross_kwh_price):
        """Sets the gross_kwh_price of this GetSpotPriceItemResponse.

        The kWh day-ahead spot price with VAT in cents  # noqa: E501

        :param gross_kwh_price: The gross_kwh_price of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._gross_kwh_price = gross_kwh_price

    @property
    def net_kwh_tax_and_levies(self):
        """Gets the net_kwh_tax_and_levies of this GetSpotPriceItemResponse.  # noqa: E501

        The kWh taxes and levies day-ahead spot price without VAT in cents  # noqa: E501

        :return: The net_kwh_tax_and_levies of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._net_kwh_tax_and_levies

    @net_kwh_tax_and_levies.setter
    def net_kwh_tax_and_levies(self, net_kwh_tax_and_levies):
        """Sets the net_kwh_tax_and_levies of this GetSpotPriceItemResponse.

        The kWh taxes and levies day-ahead spot price without VAT in cents  # noqa: E501

        :param net_kwh_tax_and_levies: The net_kwh_tax_and_levies of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._net_kwh_tax_and_levies = net_kwh_tax_and_levies

    @property
    def gross_kwh_tax_and_levies(self):
        """Gets the gross_kwh_tax_and_levies of this GetSpotPriceItemResponse.  # noqa: E501

        The kWh taxes and levies day-ahead spot price with VAT in cents  # noqa: E501

        :return: The gross_kwh_tax_and_levies of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._gross_kwh_tax_and_levies

    @gross_kwh_tax_and_levies.setter
    def gross_kwh_tax_and_levies(self, gross_kwh_tax_and_levies):
        """Sets the gross_kwh_tax_and_levies of this GetSpotPriceItemResponse.

        The kWh taxes and levies day-ahead spot price with VAT in cents  # noqa: E501

        :param gross_kwh_tax_and_levies: The gross_kwh_tax_and_levies of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._gross_kwh_tax_and_levies = gross_kwh_tax_and_levies

    @property
    def net_monthly_ostrom_base_fee(self):
        """Gets the net_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.  # noqa: E501

        The monthly Ostrom base fee without VAT in EUR  # noqa: E501

        :return: The net_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._net_monthly_ostrom_base_fee

    @net_monthly_ostrom_base_fee.setter
    def net_monthly_ostrom_base_fee(self, net_monthly_ostrom_base_fee):
        """Sets the net_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.

        The monthly Ostrom base fee without VAT in EUR  # noqa: E501

        :param net_monthly_ostrom_base_fee: The net_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._net_monthly_ostrom_base_fee = net_monthly_ostrom_base_fee

    @property
    def gross_monthly_ostrom_base_fee(self):
        """Gets the gross_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.  # noqa: E501

        The monthly Ostrom base fee with VAT in EUR  # noqa: E501

        :return: The gross_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._gross_monthly_ostrom_base_fee

    @gross_monthly_ostrom_base_fee.setter
    def gross_monthly_ostrom_base_fee(self, gross_monthly_ostrom_base_fee):
        """Sets the gross_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.

        The monthly Ostrom base fee with VAT in EUR  # noqa: E501

        :param gross_monthly_ostrom_base_fee: The gross_monthly_ostrom_base_fee of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._gross_monthly_ostrom_base_fee = gross_monthly_ostrom_base_fee

    @property
    def net_monthly_grid_fees(self):
        """Gets the net_monthly_grid_fees of this GetSpotPriceItemResponse.  # noqa: E501

        The monthly grid fees without VAT in EUR  # noqa: E501

        :return: The net_monthly_grid_fees of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._net_monthly_grid_fees

    @net_monthly_grid_fees.setter
    def net_monthly_grid_fees(self, net_monthly_grid_fees):
        """Sets the net_monthly_grid_fees of this GetSpotPriceItemResponse.

        The monthly grid fees without VAT in EUR  # noqa: E501

        :param net_monthly_grid_fees: The net_monthly_grid_fees of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._net_monthly_grid_fees = net_monthly_grid_fees

    @property
    def gross_monthly_grid_fees(self):
        """Gets the gross_monthly_grid_fees of this GetSpotPriceItemResponse.  # noqa: E501

        The monthly grid fees with VAT in EUR  # noqa: E501

        :return: The gross_monthly_grid_fees of this GetSpotPriceItemResponse.  # noqa: E501
        :rtype: object
        """
        return self._gross_monthly_grid_fees

    @gross_monthly_grid_fees.setter
    def gross_monthly_grid_fees(self, gross_monthly_grid_fees):
        """Sets the gross_monthly_grid_fees of this GetSpotPriceItemResponse.

        The monthly grid fees with VAT in EUR  # noqa: E501

        :param gross_monthly_grid_fees: The gross_monthly_grid_fees of this GetSpotPriceItemResponse.  # noqa: E501
        :type: object
        """

        self._gross_monthly_grid_fees = gross_monthly_grid_fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSpotPriceItemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSpotPriceItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
